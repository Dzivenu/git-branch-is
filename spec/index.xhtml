<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US">
<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Specifications in Mocha</title>
  <meta name="generator" content="Mocha &lt;https://mochajs.org/&gt;" />
  <meta name="license" content="MIT" />
  <meta name="copyright" content="&#169; 2016 Kevin Locke &lt;kevin@kevinlocke.name&gt;" />
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous" />
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" integrity="sha384-fLW2N01lMqjakBkx3l/M9EahuwpSfeNvV63J5ezn3uZzapT0u7EYsXMjQV+0En5r" crossorigin="anonymous" />
  <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/highlight.js/9.1.0/styles/github.min.css" />
  <style type="text/css">
section section {
  margin-left: 1em;
}
section section section section {
  margin-left: 0;
}
  </style>
</head>
<body>
  <div class="container">
    <section class="suite">
      <h1>git-branch-is</h1>
      <dl>
        <dt>exit code 0 silently for same branch name</dt>
        <dd><pre><code>gitBranchIsCmd(ARGS.concat('master'), function(err, result) {
  assert.ifError(err);
  assert.strictEqual(result.code, 0);
  assert(!result.stdout);
  assert(!result.stderr);
  done();
});</code></pre></dd>
        <dt>exit code 1 with warning for different branch name</dt>
        <dd><pre><code>gitBranchIsCmd(ARGS.concat('invalid'), function(err, result) {
  assert.ifError(err);
  assert.strictEqual(result.code, 1);
  assert(!result.stdout);
  assert(/\binvalid\b/.test(result.stderr));
  assert(/\bmaster\b/.test(result.stderr));
  done();
});</code></pre></dd>
        <dt>exit code 1 silently with quiet option</dt>
        <dd><pre><code>var args = ARGS.concat('-q', 'invalid');
gitBranchIsCmd(args, function(err, result) {
  assert.ifError(err);
  assert.strictEqual(result.code, 1);
  assert(!result.stdout);
  assert(!result.stderr);
  done();
});</code></pre></dd>
        <dt>exit code 0 with message if verbose</dt>
        <dd><pre><code>var args = ARGS.concat('-v', 'master');
gitBranchIsCmd(args, function(err, result) {
  assert.ifError(err);
  assert.strictEqual(result.code, 0);
  assert(/\bmaster\b/.test(result.stdout));
  assert(!result.stderr);
  done();
});</code></pre></dd>
        <dt>callback Error for multiple args</dt>
        <dd><pre><code>gitBranchIsCmd(ARGS.concat('master', 'foo'), function(err, result) {
  assert(err instanceof Error);
  assert(/\bargument/i.test(err.message));
  assert(/\busage/i.test(err.message));
  done();
});</code></pre></dd>
        <dt>can specify git executable</dt>
        <dd><pre><code>var gitPath = path.join('..', '..', 'test-bin', 'echo-surprise.js');
var args = ARGS.concat(
    '-C',
    SUBDIR_NAME,
    '--git-path=' + gitPath,
    'surprise'
);
gitBranchIsCmd(args, function(err, result) {
  assert.ifError(err);
  assert.strictEqual(result.code, 0);
  assert(!result.stdout);
  assert(!result.stderr);
  done();
});</code></pre></dd>
        <dt>gitDir is relative to cwd</dt>
        <dd><pre><code>var args = ARGS.concat(
    '-C',
    SUBDIR_NAME,
    '--git-dir=' + path.join('..', '.git'),
    'master'
);
gitBranchIsCmd(args, function(err, result) {
  assert.ifError(err);
  assert.strictEqual(result.code, 0);
  assert(!result.stdout);
  assert(!result.stderr);
  done();
});</code></pre></dd>
        <dt>exit code 0 works when executed</dt>
        <dd><pre><code>execFile(
  process.execPath,
  ['../bin/git-branch-is', 'master'],
  function(err, result) {
    assert.ifError(err);
    assert(!result.stdout);
    assert(!result.stderr);
    done();
  }
);</code></pre></dd>
        <dt>exit code 1 works when executed</dt>
        <dd><pre><code>execFile(
  process.execPath,
  ['../bin/git-branch-is', 'invalid'],
  function(err, result) {
    assert(err instanceof Error);
    assert.strictEqual(err.code, 1);
    assert(/\binvalid\b/.test(err.message));
    assert(/\bmaster\b/.test(err.message));
    done();
  }
);</code></pre></dd>
        <section class="suite">
          <h1>with global Promise</h1>
          <dl>
            <dt>returns a Promise with the result</dt>
            <dd><pre><code>var promise = gitBranchIsCmd(ARGS.concat('master'));
assert(promise instanceof global.Promise);
return promise.then(function(result) {
  assert.strictEqual(result.code, 0);
  assert(!result.stdout);
  assert(!result.stderr);
});</code></pre></dd>
            <dt>rejects the Promise with an Error</dt>
            <dd><pre><code>var promise = gitBranchIsCmd(ARGS.concat('-C', 'invalid', 'master'));
assert(promise instanceof global.Promise);
return promise.then(
  function(result) { throw new Error('expecting Error'); },
  function(err) { assert(err instanceof Error); }
);</code></pre></dd>
          </dl>
        </section>
        <section class="suite">
          <h1>without global Promise</h1>
          <dl>
            <dt>throws without a callback</dt>
            <dd><pre><code>assert.throws(
    function() {
      gitBranchIsCmd(ARGS.concat('master'));
    },
    function(err) {
      return err instanceof TypeError &amp;&amp;
          /\bcallback\b/.test(err.message);
    }
);</code></pre></dd>
          </dl>
        </section>
      </dl>
    </section>
    <section class="suite">
      <h1>gitBranchIs</h1>
      <dl>
        <dt>callback true for current branch name</dt>
        <dd><pre><code>gitBranchIs(BRANCH_CURRENT, function(err, result) {
  assert.ifError(err);
  assert.strictEqual(result, true);
  done();
});</code></pre></dd>
        <dt>callback false for non-existent branch name</dt>
        <dd><pre><code>gitBranchIs(BRANCH_NON_EXISTENT, function(err, result) {
  assert.ifError(err);
  assert.strictEqual(result, false);
  done();
});</code></pre></dd>
        <dt>callback false for different branch, same commit</dt>
        <dd><pre><code>gitBranchIs(BRANCH_SAME_COMMIT, function(err, result) {
  assert.ifError(err);
  assert.strictEqual(result, false);
  done();
});</code></pre></dd>
        <dt>callback true for same branch name in subdir</dt>
        <dd><pre><code>gitBranchIs(BRANCH_CURRENT, {cwd: SUBDIR_NAME}, function(err, result) {
  assert.ifError(err);
  assert.strictEqual(result, true);
  done();
});</code></pre></dd>
        <dt>can specify git executable</dt>
        <dd><pre><code>var altGitPath = path.join('..', 'test-bin', 'echo-surprise.js');
gitBranchIs('surprise', {gitPath: altGitPath}, function(err, result) {
  assert.ifError(err);
  assert.strictEqual(result, true);
  done();
});</code></pre></dd>
        <dt>callback Error outside of git repo</dt>
        <dd><pre><code>gitBranchIs(BRANCH_CURRENT, {cwd: '/'}, function(err, result) {
  assert(err instanceof Error);
  assert(result === undefined || result === null);
  done();
});</code></pre></dd>
        <dt>callback Error if cwd doesn't exist</dt>
        <dd><pre><code>gitBranchIs(BRANCH_CURRENT, {cwd: 'invalid'}, function(err, result) {
  assert(err instanceof Error);
  assert(result === undefined || result === null);
  done();
});</code></pre></dd>
        <dt>callback Error if git is not executable</dt>
        <dd><pre><code>var badGitPath = path.join(__dirname, '..', 'package.json');
gitBranchIs(BRANCH_CURRENT, {gitPath: badGitPath}, function(err, result) {
  assert(err instanceof Error);
  assert(result === undefined || result === null);
  done();
});</code></pre></dd>
        <dt>callback Error if gitDir is not a git repo</dt>
        <dd><pre><code>gitBranchIs(BRANCH_CURRENT, {gitDir: SUBDIR_NAME}, function(err, result) {
  assert(err instanceof Error);
  assert(result === undefined || result === null);
  done();
});</code></pre></dd>
        <dt>gitDir is relative to cwd</dt>
        <dd><pre><code>var options = {
  cwd: SUBDIR_NAME,
  gitDir: path.join('..', '.git')
};
gitBranchIs(BRANCH_CURRENT, options, function(err, result) {
  assert.ifError(err);
  assert.strictEqual(result, true);
  done();
});</code></pre></dd>
        <dt>gitPath is relative to cwd</dt>
        <dd><pre><code>var options = {
  cwd: SUBDIR_NAME,
  gitPath: path.join('..', '..', 'test-bin', 'echo-surprise.js')
};
gitBranchIs('surprise', options, function(err, result) {
  assert.ifError(err);
  assert.strictEqual(result, true);
  done();
});</code></pre></dd>
        <section class="suite">
          <h1>.getBranch()</h1>
          <dl>
            <dt>gets the branch name</dt>
            <dd><pre><code>gitBranchIs.getBranch(function(err, result) {
  assert.ifError(err);
  assert.strictEqual(result, BRANCH_CURRENT);
  done();
});</code></pre></dd>
          </dl>
        </section>
        <section class="suite">
          <h1>with global Promise</h1>
          <dl>
            <dt>Promise resolves true for same branch name</dt>
            <dd><pre><code>var promise = gitBranchIs(BRANCH_CURRENT);
assert(promise instanceof global.Promise);
return promise.then(function(result) {
  assert.strictEqual(result, true);
});</code></pre></dd>
            <dt>Promise resolves false for different branch name</dt>
            <dd><pre><code>var promise = gitBranchIs('invalid');
assert(promise instanceof global.Promise);
return promise.then(function(result) {
  assert.strictEqual(result, false);
});</code></pre></dd>
            <dt>Promise rejects on Error</dt>
            <dd><pre><code>var promise = gitBranchIs(BRANCH_CURRENT, 'opts');
assert(promise instanceof global.Promise);
return promise.then(
    function(result) { throw new Error('expecting Error'); },
    function(err) {
      assert(err instanceof TypeError);
      assert(/\boptions\b/.test(err.message));
    }
);</code></pre></dd>
            <section class="suite">
              <h1>.getBranch()</h1>
              <dl>
                <dt>resolves to the branch name</dt>
                <dd><pre><code>var promise = gitBranchIs.getBranch();
assert(promise instanceof global.Promise);
return promise.then(function(result) {
  assert.strictEqual(result, BRANCH_CURRENT);
});</code></pre></dd>
                <dt>rejects on Error</dt>
                <dd><pre><code>var promise = gitBranchIs.getBranch(BRANCH_CURRENT);
assert(promise instanceof global.Promise);
return promise.then(
  function(result) { throw new Error('expecting Error'); },
  function(err) {
    assert(err instanceof TypeError);
    assert(/\boptions\b/.test(err.message));
  }
);</code></pre></dd>
              </dl>
            </section>
          </dl>
        </section>
        <section class="suite">
          <h1>without global Promise</h1>
          <dl>
            <dt>throws without a callback</dt>
            <dd><pre><code>assert.throws(
    function() {
      gitBranchIs(BRANCH_CURRENT);
    },
    function(err) {
      return err instanceof TypeError &amp;&amp;
          /\bcallback\b/.test(err.message);
    }
);</code></pre></dd>
            <section class="suite">
              <h1>.getBranch()</h1>
              <dl>
                <dt>throws without a callback</dt>
                <dd><pre><code>assert.throws(
    function() {
      gitBranchIs.getBranch();
    },
    function(err) {
      return err instanceof TypeError &amp;&amp;
          /\bcallback\b/.test(err.message);
    }
);</code></pre></dd>
              </dl>
            </section>
          </dl>
        </section>
      </dl>
    </section>
  </div><!-- .container -->

  <script type="text/javascript" src="https://cdn.jsdelivr.net/jquery/2.2.1/jquery.min.js"></script>
  <script type="text/javascript" src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
  <script type="text/javascript" src="https://cdn.jsdelivr.net/highlight.js/9.1.0/highlight.min.js"></script>
  <script type="text/javascript">//<![CDATA[
'use strict';
// Adjust the nested heading level to match depth
$('section section h1').each(function() {
  var $this = $(this);
  var depth = Math.min($this.parents('section').length, 6);
  // http://stackoverflow.com/a/30059450/503410
  $this.wrapInner(document.createElement('h' + depth)).children().unwrap();
});

// Make the tests collapsible
var testNum = 0;
$('dt + dd')
  .addClass('collapse')
  .attr('role', 'tabpanel')
  .attr('aria-expanded', 'false')
  .each(function() {
    var $this = $(this);
    var $dt = $this.prev();

    ++testNum;
    var id = 'test' + testNum;
    var idDt = id + '-title';
    var idDd = id + '-desc';

    $dt.attr('id', idDt);
    $this.attr('id', idDd);

    $dt.wrapInner('<a role="button" data-toggle="collapse" href="#' + idDd +
        '" aria-expanded="false" aria-controls="' + idDd + '"></a>')
      .children()
      .collapse();
  });

// Enable syntax highlighting for the code (which is all JavaScript)
hljs.configure({languages: ['javascript']});
hljs.initHighlighting();
//]]></script>
</body>
</html>
